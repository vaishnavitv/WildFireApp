@page "/weather"
@attribute [StreamRendering]
@using WildFireApp.Backend.Model;
@using WildFireApp.Backend;

<PageTitle>WildFire Data</PageTitle>

<h1>WildFire Data</h1>

<div>
    <EditForm Model="userSelection" OnSubmit="ChangeListings" FormName="UserSelectionForm">

        <div>
            <label>Year</label>
            <InputSelect @bind-Value="userSelection!.year">
                @foreach (var year in years)
                {
                    <option value=@year>@year</option>
                }
            </InputSelect>
        </div>

        <div>
            <label>Status</label>
            <InputSelect @bind-Value="userSelection!.status">
                @foreach (var status in statuses)
                {
                    <option value=@status>@status</option>
                }
            </InputSelect>
        </div>

        <div>
            <label>Cause</label>
            <InputSelect @bind-Value="userSelection!.cause">
                @foreach (var cause in causes)
                {
                    <option value=@cause>@cause</option>
                }
            </InputSelect>
        </div>

        <div>
            <button type="submit">Submit</button>
        </div>
    </EditForm>
</div>

@if (wildfire == null)
{
    <p><em>Loading Results ...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Fire #</th>
                <th>Year</th>
                <th>Status</th>
                <th>Cause</th>
            </tr>
        </thead>
        <tbody>
            @if(wildfire?.features != null)
            foreach (var wildfireResult in wildfire.features)
            {
                <tr>
                    <td>@wildfireResult.properties.FIRE_ID</td>
                    <td>@wildfireResult.properties.FIRE_YEAR</td>
                    <td>@wildfireResult.properties.FIRE_STATUS</td>
                    <td>@wildfireResult.properties.FIRE_CAUSE</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //GeoService.
    private GeoService service = new GeoService();

    //TODO: Write code to use last 5 Years incl. Present Year.
    //TODO: Convert this to enums
    private List<int> years = [2023];
    private List<string> statuses = ["Out", "Under Control", ""];
    private List<string> causes = ["Lightning", "Person", "Unknown", ""];

    //User Selection.
    class UserSelection
    {
        public int year { get; set; }
        public string status { get; set; }
        public string cause { get; set; }
    }
    [SupplyParameterFromForm]
    private UserSelection? userSelection { get; set; }

    // Displayed Data.
    private GeoServer.WildFire wildfire;

    protected override async Task OnInitializedAsync()
    {
        userSelection ??= new UserSelection() {
                year = -1,
                status = "",
                cause = ""
        };
    await ChangeListings();
    }

    async Task ChangeListings()
    {
        Dictionary<string, Object> userFilter = new Dictionary<string, object>();
        if (userSelection?.year != -1)
        {
            userFilter.Add("FIRE_YEAR", userSelection.year);
        }
        if (!String.IsNullOrEmpty(userSelection?.cause))
        {
            userFilter.Add("FIRE_CAUSE", userSelection.cause);
        }
        if (!String.IsNullOrEmpty(userSelection?.status))
        {
            userFilter.Add("FIRE_STATUS", userSelection.status);
        }

        if(userFilter.Count > 0) {
            wildfire = await service.GetWildFireResultsByMultipleFilters(userFilter);
        } else {
            wildfire = await service.GetAllWildFireResults();
        }
    }
}
